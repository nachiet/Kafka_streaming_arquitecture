/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.farmia.sales;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SalesTransaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5548573192412413514L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SalesTransaction\",\"namespace\":\"com.farmia.sales\",\"fields\":[{\"name\":\"transaction_id\",\"type\":{\"type\":\"string\",\"arg.properties\":{\"regex\":\"tx[1-9]{5}\"}}},{\"name\":\"product_id\",\"type\":{\"type\":\"string\",\"arg.properties\":{\"regex\":\"prod_[1-9]{3}\"}}},{\"name\":\"category\",\"type\":{\"type\":\"string\",\"arg.properties\":{\"options\":[\"fertilizers\",\"seeds\",\"pesticides\",\"equipment\",\"supplies\",\"soil\"]}}},{\"name\":\"quantity\",\"type\":{\"type\":\"int\",\"arg.properties\":{\"range\":{\"min\":1,\"max\":10}}}},{\"name\":\"price\",\"type\":{\"type\":\"float\",\"arg.properties\":{\"range\":{\"min\":10.0,\"max\":200.0}}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SalesTransaction> ENCODER =
      new BinaryMessageEncoder<SalesTransaction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SalesTransaction> DECODER =
      new BinaryMessageDecoder<SalesTransaction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SalesTransaction> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SalesTransaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SalesTransaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SalesTransaction>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SalesTransaction to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SalesTransaction from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SalesTransaction instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SalesTransaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence transaction_id;
   private java.lang.CharSequence product_id;
   private java.lang.CharSequence category;
   private int quantity;
   private float price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SalesTransaction() {}

  /**
   * All-args constructor.
   * @param transaction_id The new value for transaction_id
   * @param product_id The new value for product_id
   * @param category The new value for category
   * @param quantity The new value for quantity
   * @param price The new value for price
   */
  public SalesTransaction(java.lang.CharSequence transaction_id, java.lang.CharSequence product_id, java.lang.CharSequence category, java.lang.Integer quantity, java.lang.Float price) {
    this.transaction_id = transaction_id;
    this.product_id = product_id;
    this.category = category;
    this.quantity = quantity;
    this.price = price;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transaction_id;
    case 1: return product_id;
    case 2: return category;
    case 3: return quantity;
    case 4: return price;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transaction_id = (java.lang.CharSequence)value$; break;
    case 1: product_id = (java.lang.CharSequence)value$; break;
    case 2: category = (java.lang.CharSequence)value$; break;
    case 3: quantity = (java.lang.Integer)value$; break;
    case 4: price = (java.lang.Float)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transaction_id' field.
   * @return The value of the 'transaction_id' field.
   */
  public java.lang.CharSequence getTransactionId() {
    return transaction_id;
  }


  /**
   * Sets the value of the 'transaction_id' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.CharSequence value) {
    this.transaction_id = value;
  }

  /**
   * Gets the value of the 'product_id' field.
   * @return The value of the 'product_id' field.
   */
  public java.lang.CharSequence getProductId() {
    return product_id;
  }


  /**
   * Sets the value of the 'product_id' field.
   * @param value the value to set.
   */
  public void setProductId(java.lang.CharSequence value) {
    this.product_id = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public float getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(float value) {
    this.price = value;
  }

  /**
   * Creates a new SalesTransaction RecordBuilder.
   * @return A new SalesTransaction RecordBuilder
   */
  public static com.farmia.sales.SalesTransaction.Builder newBuilder() {
    return new com.farmia.sales.SalesTransaction.Builder();
  }

  /**
   * Creates a new SalesTransaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SalesTransaction RecordBuilder
   */
  public static com.farmia.sales.SalesTransaction.Builder newBuilder(com.farmia.sales.SalesTransaction.Builder other) {
    if (other == null) {
      return new com.farmia.sales.SalesTransaction.Builder();
    } else {
      return new com.farmia.sales.SalesTransaction.Builder(other);
    }
  }

  /**
   * Creates a new SalesTransaction RecordBuilder by copying an existing SalesTransaction instance.
   * @param other The existing instance to copy.
   * @return A new SalesTransaction RecordBuilder
   */
  public static com.farmia.sales.SalesTransaction.Builder newBuilder(com.farmia.sales.SalesTransaction other) {
    if (other == null) {
      return new com.farmia.sales.SalesTransaction.Builder();
    } else {
      return new com.farmia.sales.SalesTransaction.Builder(other);
    }
  }

  /**
   * RecordBuilder for SalesTransaction instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SalesTransaction>
    implements org.apache.avro.data.RecordBuilder<SalesTransaction> {

    private java.lang.CharSequence transaction_id;
    private java.lang.CharSequence product_id;
    private java.lang.CharSequence category;
    private int quantity;
    private float price;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.farmia.sales.SalesTransaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[0].schema(), other.transaction_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.product_id)) {
        this.product_id = data().deepCopy(fields()[1].schema(), other.product_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.category)) {
        this.category = data().deepCopy(fields()[2].schema(), other.category);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing SalesTransaction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.farmia.sales.SalesTransaction other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[0].schema(), other.transaction_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.product_id)) {
        this.product_id = data().deepCopy(fields()[1].schema(), other.product_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.category)) {
        this.category = data().deepCopy(fields()[2].schema(), other.category);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'transaction_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionId() {
      return transaction_id;
    }


    /**
      * Sets the value of the 'transaction_id' field.
      * @param value The value of 'transaction_id'.
      * @return This builder.
      */
    public com.farmia.sales.SalesTransaction.Builder setTransactionId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.transaction_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_id' field has been set.
      * @return True if the 'transaction_id' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transaction_id' field.
      * @return This builder.
      */
    public com.farmia.sales.SalesTransaction.Builder clearTransactionId() {
      transaction_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductId() {
      return product_id;
    }


    /**
      * Sets the value of the 'product_id' field.
      * @param value The value of 'product_id'.
      * @return This builder.
      */
    public com.farmia.sales.SalesTransaction.Builder setProductId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.product_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'product_id' field has been set.
      * @return True if the 'product_id' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'product_id' field.
      * @return This builder.
      */
    public com.farmia.sales.SalesTransaction.Builder clearProductId() {
      product_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.farmia.sales.SalesTransaction.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.category = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public com.farmia.sales.SalesTransaction.Builder clearCategory() {
      category = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.farmia.sales.SalesTransaction.Builder setQuantity(int value) {
      validate(fields()[3], value);
      this.quantity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.farmia.sales.SalesTransaction.Builder clearQuantity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public float getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.farmia.sales.SalesTransaction.Builder setPrice(float value) {
      validate(fields()[4], value);
      this.price = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.farmia.sales.SalesTransaction.Builder clearPrice() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SalesTransaction build() {
      try {
        SalesTransaction record = new SalesTransaction();
        record.transaction_id = fieldSetFlags()[0] ? this.transaction_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.product_id = fieldSetFlags()[1] ? this.product_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.category = fieldSetFlags()[2] ? this.category : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.quantity = fieldSetFlags()[3] ? this.quantity : (java.lang.Integer) defaultValue(fields()[3]);
        record.price = fieldSetFlags()[4] ? this.price : (java.lang.Float) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SalesTransaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<SalesTransaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SalesTransaction>
    READER$ = (org.apache.avro.io.DatumReader<SalesTransaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.transaction_id);

    out.writeString(this.product_id);

    out.writeString(this.category);

    out.writeInt(this.quantity);

    out.writeFloat(this.price);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.transaction_id = in.readString(this.transaction_id instanceof Utf8 ? (Utf8)this.transaction_id : null);

      this.product_id = in.readString(this.product_id instanceof Utf8 ? (Utf8)this.product_id : null);

      this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);

      this.quantity = in.readInt();

      this.price = in.readFloat();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.transaction_id = in.readString(this.transaction_id instanceof Utf8 ? (Utf8)this.transaction_id : null);
          break;

        case 1:
          this.product_id = in.readString(this.product_id instanceof Utf8 ? (Utf8)this.product_id : null);
          break;

        case 2:
          this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);
          break;

        case 3:
          this.quantity = in.readInt();
          break;

        case 4:
          this.price = in.readFloat();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










